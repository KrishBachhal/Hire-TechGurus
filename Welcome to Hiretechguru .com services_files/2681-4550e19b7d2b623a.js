"use strict";

import React, { useEffect, useMemo, useCallback, useRef } from "react";
import { ChakraProvider, Box, Flex, Text, Button, useDisclosure, Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter, useToast, FormControl, FormLabel, Input, Spinner, Select } from "@chakra-ui/react";
import { FiSettings } from "react-icons/fi";
import { MdKeyboardArrowDown } from "react-icons/md";
import { useTranslation } from "react-i18next";
import { useRouter } from "next/router";
import { useIntercom } from "react-use-intercom";
import { useShareFeedback } from "react-use-share-feedback";
import { useHotkeys } from "react-hotkeys-hook";
import { useRecoilState } from "recoil";
import { i18nEnabledAtom, selectedLocaleAtom } from "../atoms/i18n";
import { isConnectedAtom } from "../atoms/intercom";
import { supportEmailAtom } from "../atoms/support";

const LocaleModal = ({ isOpen, onOpen, onClose }) => {
  const [locales, setLocales] = useRecoilState(i18nEnabledAtom);
  const [selectedLocale, setSelectedLocale] = useRecoilState(selectedLocaleAtom);
  const [isLoading, setIsLoading] = useRecoilState(isConnectedAtom);
  const [supportEmail, setSupportEmail] = useRecoilState(supportEmailAtom);
  const { t } = useTranslation();
  const router = useRouter();
  const intercom = useIntercom();
  const shareFeedback = useShareFeedback();
  const toast = useToast();
  const { isOpen: isSettingsOpen, onOpen: onSettingsOpen, onClose: onSettingsClose } = useDisclosure();
  const { isOpen: isFeedbackOpen, onOpen: onFeedbackOpen, onClose: onFeedbackClose } = useDisclosure();
  const { isOpen: isHelpOpen, onOpen: onHelpOpen, onClose: onHelpClose } = useDisclosure();
  const { isOpen: isShortcutsOpen, onOpen: onShortcutsOpen, onClose: onShortcutsClose } = useDisclosure();
  const { isOpen: isTourOpen, onOpen: onTourOpen, onClose: onTourClose } = useDisclosure();
  const { isOpen: isReplayOpen, onOpen: onReplayOpen, onClose: onReplayClose } = useDisclosure();
  const { isOpen: isDocEditorOpen, onOpen: onDocEditorOpen, onClose: onDocEditorClose } = useDisclosure();
  const { isOpen: isCardEditorOpen, onOpen: onCardEditorOpen, onClose: onCardEditorClose } = useDisclosure();
  const { isOpen: isNoteEditorOpen, onOpen: onNoteEditorOpen, onClose: onNoteEditorClose } = useDisclosure();
  const { isOpen: isCodeEditorOpen, onOpen: onCodeEditorOpen, onClose: onCodeEditorClose } = useDisclosure();
  const { isOpen: isMathEditorOpen, onOpen: onMathEditorOpen, onClose: onMathEditorClose } = useDisclosure();
  const { isOpen: isTableEditorOpen, onOpen: onTableEditorOpen, onClose: onTableEditorClose } = useDisclosure();
  const { isOpen: isMediaEditorOpen, onOpen: onMediaEditorOpen, onClose: onMediaEditorClose } = useDisclosure();
  const { isOpen: isChatOpen, onOpen: onChatOpen, onClose: onChatClose } = useDisclosure();
  const { isOpen: isCommentOpen, onOpen: onCommentOpen, onClose: onCommentClose } = useDisclosure();
  const { isOpen: isShareOpen, onOpen: onShareOpen, onClose: onShareClose } = useDisclosure();
  const { isOpen: isEmbedOpen, onOpen: onEmbedOpen, onClose: onEmbedClose } = useDisclosure();
  const { isOpen: isLinkOpen, onOpen: onLinkOpen, onClose: onLinkClose } = useDisclosure();
  const { isOpen: isCodeOpen, onOpen: onCodeOpen, onClose: onCodeClose } = useDisclosure();
  const { isOpen: isMarkdownOpen, onOpen: onMarkdownOpen, onClose: onMarkdownClose } = useDisclosure();
  const { isOpen: isHtmlOpen, onOpen: onHtmlOpen, onClose: onHtmlClose } = useDisclosure();
  const { isOpen: isJsonOpen, onOpen: onJsonOpen, onClose: onJsonClose } = useDisclosure();
  const { isOpen: isYamlOpen, onOpen: onYamlOpen, onClose: onYamlClose } = useDisclosure();
  const { isOpen: isSvgOpen, onOpen: onSvgOpen, onClose: onSvgClose } = useDisclosure();
  const { isOpen: isPdfOpen, onOpen: onPdfOpen, onClose: onPdfClose } = useDisclosure();
  const { isOpen: isCsvOpen, onOpen: onCsvOpen, onClose: onCsvClose } = useDisclosure();
  const { isOpen: isXmlOpen, onOpen: onXmlOpen, onClose: onXmlClose } = useDisclosure();
  const { isOpen: isGifOpen, onOpen: onGifOpen, onClose: onGifClose } = useDisclosure();
  const { isOpen: isJpgOpen, onOpen: onJpgOpen, onClose: onJpgClose } = useDisclosure();
  const { isOpen: isPngOpen, onOpen: onPngOpen, onClose: onPngClose } = useDisclosure();
  const { isOpen: isWebpOpen, onOpen: onWebpOpen, onClose: onWebpClose } = useDisclosure();
  const { isOpen: isVideoOpen, onOpen: onVideoOpen, onClose: onVideoClose } = useDisclosure();
  const { isOpen: is
